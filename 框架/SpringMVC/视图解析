### 页面跳转不需要拼串的两种方式

```java
/**
 * forward:转发不用进行拼串
 * @return
 */
@RequestMapping("/forward")
public String test(){
    return "forward:/test.jsp";
}
/**
 * redirect:重定向不用进行拼串
 * @return
 */
@RequestMapping("/redirect")
public String handler(){
    return "redirect:/test.jsp";
}
```





## 视图解析的源码分析

### 步骤

####           进入processDispatchResult方法中

```java
private void processDispatchResult(HttpServletRequest request, HttpServletResponse response,
      HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {

   boolean errorView = false;

   if (exception != null) {
      if (exception instanceof ModelAndViewDefiningException) {
         logger.debug("ModelAndViewDefiningException encountered", exception);
         mv = ((ModelAndViewDefiningException) exception).getModelAndView();
      }
      else {
         Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);
         mv = processHandlerException(request, response, handler, exception);
         errorView = (mv != null);
      }
   }

   // Did the handler return a view to render?
   if (mv != null && !mv.wasCleared()) {
       
       //进入渲染  render:渲染
      render(mv, request, response);
       
      if (errorView) {
         WebUtils.clearErrorRequestAttributes(request);
      }
   }
   else {
      if (logger.isDebugEnabled()) {
         logger.debug("Null ModelAndView returned to DispatcherServlet with name '" + getServletName() +
               "': assuming HandlerAdapter completed request handling");
      }
   }

   if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {
      // Concurrent handling started during a forward
      return;
   }

   if (mappedHandler != null) {
      mappedHandler.triggerAfterCompletion(request, response, null);
   }
}
```

##### 在processDispatchResult中进入render

> 进行页面的渲染
>
> **流程**
>
> > 先得到view对象
> >
> > 

```java
protected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {
   // Determine locale for request and apply it to the response.
   Locale locale = this.localeResolver.resolveLocale(request);
   response.setLocale(locale);

    //先创建一个view
    
   View view;
   if (mv.isReference()) {
      // We need to resolve the view name.
       //viewResolver：就是通过视图名(方法的返回值)得到view对象
      view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);
      if (view == null) {
         throw new ServletException(
               "Could not resolve view with name '" + mv.getViewName() + "' in servlet with name '" +
                     getServletName() + "'");
      }
   }
   else {
      // No need to lookup: the ModelAndView object contains the actual View object.
      view = mv.getView();
      if (view == null) {
         throw new ServletException("ModelAndView [" + mv + "] neither contains a view name nor a " +
               "View object in servlet with name '" + getServletName() + "'");
      }
   }

   // Delegate to the View object for rendering.
   if (logger.isDebugEnabled()) {
      logger.debug("Rendering view [" + view + "] in DispatcherServlet with name '" + getServletName() + "'");
   }
   try {
       //
      view.render(mv.getModelInternal(), request, response);
   }
   catch (Exception ex) {
      if (logger.isDebugEnabled()) {
         logger.debug("Error rendering view [" + view + "] in DispatcherServlet with name '"
               + getServletName() + "'", ex);
      }
      throw ex;
   }
}
```

###### 在render中进入resolveViewName：

>  获取完整view对象细节，通过viewName得到视图对象
>
>  **视图解析器流程：**
>
>  > 所有配置的视图解析器都来尝试解析根据视图名（页面地址）得到view对象；
>  >
>  > 如果能得到，就返回。
>  >
>  > 得不到就换下一个视图解析器

```java
protected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,
      HttpServletRequest request) throws Exception {

   for (ViewResolver viewResolver : this.viewResolvers) {
       //根据方法的返回值得到view对象
      View view = viewResolver.resolveViewName(viewName, locale);
      if (view != null) {
         return view;
      }
   }
   return null;
}
```

###### 在viewResolver.resolveViewName中获进入resolveViewName

> 通过viewName创建view对象的过程，

```java
@Override
public View resolveViewName(String viewName, Locale locale) throws Exception {
   if (!isCache()) {
 
      return createView(viewName, locale);
   }
   else {
      Object cacheKey = getCacheKey(viewName, locale);
      View view = this.viewAccessCache.get(cacheKey);
      if (view == null) {
         synchronized (this.viewCreationCache) {
            view = this.viewCreationCache.get(cacheKey);
            if (view == null) {
               // Ask the subclass to create the View object.
                      //创建view对象
               view = createView(viewName, locale);
               if (view == null && this.cacheUnresolved) {
                  view = UNRESOLVED_VIEW;
               }
               if (view != null) {
                  this.viewAccessCache.put(cacheKey, view);
                  this.viewCreationCache.put(cacheKey, view);
                  if (logger.isTraceEnabled()) {
                     logger.trace("Cached view [" + cacheKey + "]");
                  }
               }
            }
         }
      }
      return (view != UNRESOLVED_VIEW ? view : null);
   }
}
```

######  createView（）方法的细节

> 根据转发前缀来创建对象
>
> > redirect : 创建RedirectView
> >
> > forward ： 创建InternalResourceView
> >
> > 没有前缀：创建一个配置文件中默认创建的那个view对象

```java
@Override
protected View createView(String viewName, Locale locale) throws Exception {
   // If this resolver is not supposed to handle the given view,
   // return null to pass on to the next resolver in the chain.
   if (!canHandle(viewName, locale)) {
      return null;
   }
   // Check for special "redirect:" prefix.
   if (viewName.startsWith(REDIRECT_URL_PREFIX)) {
      String redirectUrl = viewName.substring(REDIRECT_URL_PREFIX.length());
      RedirectView view = new RedirectView(redirectUrl, isRedirectContextRelative(), isRedirectHttp10Compatible());
      return applyLifecycleMethods(viewName, view);
   }
   // Check for special "forward:" prefix.
   if (viewName.startsWith(FORWARD_URL_PREFIX)) {
      String forwardUrl = viewName.substring(FORWARD_URL_PREFIX.length());
      return new InternalResourceView(forwardUrl);
   }
   // Else fall back to superclass implementation: calling loadView.
   return super.createView(viewName, locale);
}
```

**view.render()**

> 渲染页面

```java
@Override
public void render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception {
   if (logger.isTraceEnabled()) {
      logger.trace("Rendering view with name '" + this.beanName + "' with model " + model +
         " and static attributes " + this.staticAttributes);
   }

   Map<String, Object> mergedModel = createMergedOutputModel(model, request, response);

   prepareResponse(request, response);
    //准备渲染需要用的数据
   renderMergedOutputModel(mergedModel, request, response);
}
```

**renderMergedOutputModel（）**

> 渲染实现的具体步骤

```java
@Override
protected void renderMergedOutputModel(
      Map<String, Object> model, HttpServletRequest request, HttpServletResponse response) throws Exception {

   // Determine which request handle to expose to the RequestDispatcher.
   HttpServletRequest requestToExpose = getRequestToExpose(request);

   // Expose the model object as request attributes.
    
    //将隐含模型中的key - value放入到请求域中
   exposeModelAsRequestAttributes(model, requestToExpose);

   // Expose helpers as request attributes, if any.
   exposeHelpers(requestToExpose);

   // Determine the path for the request dispatcher.
    //转发的地址
   String dispatcherPath = prepareForRendering(requestToExpose, response);

   // Obtain a RequestDispatcher for the target resource (typically a JSP).
   RequestDispatcher rd = getRequestDispatcher(requestToExpose, dispatcherPath);
   if (rd == null) {
      throw new ServletException("Could not get RequestDispatcher for [" + getUrl() +
            "]: Check that the corresponding file exists within your web application archive!");
   }

   // If already included or response already committed, perform include, else forward.
   if (useInclude(requestToExpose, response)) {
      response.setContentType(getContentType());
      if (logger.isDebugEnabled()) {
         logger.debug("Including resource [" + getUrl() + "] in InternalResourceView '" + getBeanName() + "'");
      }
      rd.include(requestToExpose, response);
   }

   else {
      // Note: The forwarded resource is supposed to determine the content type itself.
      if (logger.isDebugEnabled()) {
         logger.debug("Forwarding to resource [" + getUrl() + "] in InternalResourceView '" + getBeanName() + "'");
      }
       //请求转发
      rd.forward(requestToExpose, response);
   }
}
```

**exposeModelAsRequestAttributes（）实现的细节**

> 将隐含域中的映射关系加入到requst域中

```java
protected void exposeModelAsRequestAttributes(Map<String, Object> model, HttpServletRequest request) throws Exception {
   for (Map.Entry<String, Object> entry : model.entrySet()) {
      String modelName = entry.getKey();
      Object modelValue = entry.getValue();
      if (modelValue != null) {
          //加入
         request.setAttribute(modelName, modelValue);
         if (logger.isDebugEnabled()) {
            logger.debug("Added model object '" + modelName + "' of type [" + modelValue.getClass().getName() +
                  "] to request in view with name '" + getBeanName() + "'");
         }
      }
      else {
          //加入
         request.removeAttribute(modelName);
         if (logger.isDebugEnabled()) {
            logger.debug("Removed model object '" + modelName +
                  "' from request in view with name '" + getBeanName() + "'");
         }
      }
   }
}
```

**总结**

> **视图解析器主要是为了的到视图对象；视图对象才能真正的转发或重定向到页面**

## 视图解析流程

![image-20210412113248278](C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20210412113248278.png)

**这个视图对象是不会存在线程安全问题**