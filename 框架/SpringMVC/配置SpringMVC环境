### 导包

> ```xml
> commons-logging-1.1.3.jar
> spring-context-4.0.0.RELEASE.jar
> spring-webmvc-4.0.0.RELEASE.jar
> junit-4.12.jar
> spring-expression-4.0.0.RELEASE.jar
> spring-core-4.0.0.RELEASE.jar
> spring-aop-4.0.0.RELEASE.jar
> spring-beans-4.0.0.RELEASE.jar
> spring-web-4.0.0.RELEASE.jar
> ```

### 写配置

一、在web.xml中配置拦截请求文件，给使用SpringMVC提供一个入口

```xml
  <servlet>
        <servlet-name>DispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:SpringMVC.xml</param-value>
        </init-param>

<!--    启动加载，
        会在服务器启动的时候创建对象，值越小优先级越高
-->
        <load-on-startup>1</load-on-startup>
    </servlet>
<!--
        /* 拦截范围更大，会拦截.jsp请求
        /  不会拦截.jsp请求

-->
    <servlet-mapping>
        <servlet-name>DispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
```

二、在源文件中配置springContext的xml文件，这一步主要是来指定配置的地址和配置时的请求（springmvc自身的配置），类似于在web中配置web.xml，在springmvc是通过注解来实现的

```xml
<!--  先进行包扫描，导入到ioc容器中  -->
<context:component-scan base-package="com.atguigu"></context:component-scan>

<!-- 这里主要是简化返回请求的配置信息  -->
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <!-- 前置信息（一定要注意最后的斜杠问题，！！！！！！！！！！！！！）   -->
    <property name="prefix" value="/WEB-INF/page/"></property>
        <!-- 后置信息  -->
    <property name="suffix" value=".jsp"></property>
    
            <!--前置信息 + 实体类返回的信息 + 后置信息  -->
</bean>
```

**实体类**

```java
@Controller//控制器注解
public class helloworld {
	//响应映射（）内表示请求地址，类似于web.xml中国servlet.mapping配置的地址
    @RequestMapping(value = "/hello")
    public String hello(){
        System.out.println("========");
        return "success";
    }

}
```

### 细节流程

**一、运行流程**

> ![image-20210327134356389](C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20210327134356389.png)

二、 **前端控制器**

> ![image-20210327135753288](C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20210327135753288.png)

**三、 前端控制器的URL配置**

> ```xml
>   <servlet-mapping>
>         <servlet-name>DispatcherServlet</servlet-name>
>       <!--  
>  		/ 在tomcat服务中defaultServlet其处理的是静态资源请求，
> 		在这里将这个请求拦截了，就失去了对于请求的处理所以就不能处理静态请求
> 		/* 是将所有的请求拦截，直接就不能处理请求
> 
> 		服务器中对于jsp和servlet处理是按照.jsp来处理的，所以就能处理动态请求
> 
>      --> 
>         <url-pattern>/</url-pattern>
>    </servlet-mapping>
> ```