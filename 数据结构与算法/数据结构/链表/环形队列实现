### 环形队列实现思路

> ![image-20200927204401552](C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20200927204401552.png)

### 实现代码

```java
class recycleQueue {

    private int rear = 0;//表示尾，指向最后一个元素的后一个位置
    private int front = 0;//表示头，指向最前一个元素
    private int maxSize;//表示最大容量
    private int[] arr;//容器数组

    //初始化数组
    public recycleQueue(int maxSize) {

        arr = new int[maxSize];
        this.maxSize = maxSize;
    }

    //获取元素的size（）
    public int size() {

        return (rear + maxSize - front) % maxSize;
    }

    //判断队列是否为满
    public boolean isFull() {

        return (rear + 1) % maxSize == front;
    }

    //判断队列是否为空
    public boolean isEmpty() {
        return rear == front;
    }

    //添加数据
    public void add(int n) {
        if (isFull()) {
            System.out.println("元素已满");
            return;
        }

        arr[rear] = n;
        //必须考虑取模
        rear = (rear + 1) % maxSize;

    }

    //获取队列的数据，出队列
    public int get() {
        if (isEmpty()) {

            throw new RuntimeException("数组为空，无法取出数据。。。。");
        }

        int value = arr[front];
        front = (front + 1) % maxSize;

        return value;

    }

    //显示队列的数据

    public void show() {

        if (isEmpty()) {

            throw new RuntimeException("数组为空，无法显示数据。。");
        }

        //显示队列的数据

        for (int i = front; i < front + size(); i = (i + 1) % maxSize) {
            System.out.println(arr[i]);

        }

    }

    //返回头元素
    public int headData() {
        if (isEmpty()) {
            throw new RuntimeException("数组为空，没有头元素");
        }

        return arr[front];

    }
```

