### 搜索引擎

**MyISAM和InnoDB的区别**

<img src="C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20210707102421002.png" alt="image-20210707102421002" style="zoom:50%;" />

## 索引

### 索引的数据结构

B+树，相比于b树减少io的次数

### 索引的分类

![image-20210707102742045](C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20210707102742045.png)

### 性能分析

Explain 包含的信息

<img src="C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20210707102836988.png" alt="image-20210707102836988" style="zoom:50%;" />

#### 重要的项目信息

**id**

### ![image-20210707102938488](C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20210707102938488.png)

**type**

> type显示的是访问类型，是较为重要的一个指标，结果值从最好到最坏依次是： 
>
> system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL 
>
> system>const>eq_ref>ref>range>index>ALL
>
>
> 一般来说，得保证查询至少达到range级别，最好能达到ref。

**key_len**

> 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度.
>
> key_len字段能够帮你检查是否充分的利用上了索引

**row**

> rows列显示MySQL认为它执行查询时必须检查的行数。

**Extra**

> 包含不适合在其他列中显示但十分重要的额外信息

### 单表查询索引失效

**最佳左前缀法则**

> 如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。
>
> 其索引查询顺序就是自己创建索引的顺序。所以在创建索引的时候尽量将不易匹配的数据放在最后。
>
> <img src="C:\Users\大梦\AppData\Roaming\Typora\typora-user-images\image-20210707112007917.png" alt="image-20210707112007917" style="zoom:50%;" />

**函数、计算和类型转换会导致索引失效**

> 在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描

**范围查询右边的数据，不能使用到索引**

> 由于最佳左前缀法则，当查询到范围的时候。之后的查询就会很慢

**is not null 也无法使用索引,但是is null是可以使用索引的**

> 负面查询索引失效

**like以通配符开头('%abc...')mysql索引失效会变成全表扫描的操作**

> 也是由于最佳左前缀法则，其不知道查询之后的数据的索引位置，
>
> 所以索引失效。

### 关联查询

> 核心就在于小表驱动大表。在mysql中，驱动表是不会使用索引的，只能在被驱动表上使用到索引。
>
> 所以就需要小表作为驱动表，这样查询不是ALL查询，用到索引也会多一点。

注意点：

一、尽量少使用子查询，能直接多表关联查询的直接关联查询。使用子查询的虚拟化表，是没有索引的。查询效率不行。

二、子查询尽量放到驱动表，因为去没有索引。放被驱动表查询效率较慢。

### 子查询

> 用left outer join  on  xxx is null 替代 尽量不要使用not in  或者 not exist.因为使用这种类型的判断是不能使用到索引的。

### 分组查询优化

#### order by

**#顺序错，必排序**

> 类似于最佳左缀查询，其开始的位置找不到索引。后面的索引直接失效

**#方向反 必排序**

> 在order by中其排序的顺序不一致的话，即是跟索引建立的顺序是一致的。也是会进行排序的，从而降低查询效率

 **#无过滤 不索引**

> 在查询数据的时候，需要对数据进行过滤。类似于where limit 进行过滤。

#### group by

>  group by 使用索引的原则几乎跟order by一致 ，
>
> **唯一区别是groupby 即使没有过滤条件用到索引，也可以直接使用索引**

### 覆盖索引

> 在进行全表查询的时候，不要使用select * 。这样数据库不会还使用到索引。